# View users
	select user,host from mysql.user;

# Create root2 user after new installation of mysql.  
	CREATE USER 'root2'@'localhost' IDENTIFIED BY 'password';
	GRANT ALL PRIVILEGES ON *.* TO 'root2'@'localhost' WITH GRANT OPTION;
	FLUSH PRIVILEGES;

    # Run if new mysql instance is installed.
    mysql -e "CREATE USER 'root2'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON *.* TO 'root2'@'localhost' WITH GRANT OPTION; FLUSH PRIVILEGES;"

# Save database table sizes
	mysql -t -u ${MYSQL_USER} -p${MYSQL_PWD} -h ${MYSQL_HOST} ${MYSQL_DBNAME} <<< "
	  SELECT table_name AS Tables, 
		round(((data_length + index_length) / 1024 / 1024), 2) 'Size in MB' 
		FROM information_schema.TABLES 
		WHERE table_schema = '${MYSQL_DBNAME}'
		ORDER BY (data_length + index_length) ASC;" >> ${BACKUP_DIR_PATH}/${BACKUP_DIR_NAME}.info.txt

# Get database size.
    SELECT table_schema "Database Name"
         , SUM( data_length + index_length ) / 1048576  AS "Database Size in MB"
         , SUM( data_free )/ 1048576  AS "Free Space in MB"
    FROM information_schema.TABLES
    GROUP BY table_schema;

# Truncate or drop
    TRUNCATE TABLE Price;
    DROP TABLE Price;

# Insert data into table from a query.
    INSERT INTO tbl_temp2 (fld_id)
        SELECT tbl_temp1.fld_order_id
        FROM tbl_temp1 WHERE tbl_temp1.fld_order_id > 100;

# String functions: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_instr
    REPLACE(colname, 'str1', 'replace_str')
    
# IN() function: id = 12 or 555 or 888
    SELECT * from Product WHERE id IN (12, 5555, 888)

# Export results as CSV file
	SELECT order_id,product_name,qty
	FROM orders
	WHERE foo = 'bar'
	INTO OUTFILE '/var/lib/mysql-files/orders.csv'
	FIELDS TERMINATED BY ','
	ENCLOSED BY '"'
	LINES TERMINATED BY '\n';
    
    # No column names or header, no pipes
    mysql --skip-column-names --silent -h"${host}" -u${username} -p${password} ${db_name} -e "${query}"
    
# Import from CSV.
    -Requiremement: Table must exists first.
    -Quoting is important.
            LOAD DATA LOCAL INFILE '/path/to/file.csv'
                INTO TABLE <tablename>
                FIELDS TERMINATED BY ','
                ENCLOSED BY '"'
                LINES TERMINATED BY '\n'
                IGNORE 1 LINES
                (colname1, colname2...)
                
        query_drop_table="DROP TABLE IF EXISTS ${table_name}"
            echo "${query_drop_table}" | mysql -h"${SB_HOST}" -u"${SB_USERNAME}" -p"${SB_PASSWORD}" "${SB_DB_NAME}" 
        
        data_type="VARCHAR(255)"
        query_create_table=$(head -1 "${text_file}" | sed "s/,/ ${data_type}, /g" | sed "s/^/CREATE TABLE ${table_name}(/" | sed "s/$/ ${data_type})/")
            echo "${query_create_table}" | mysql -h"${SB_HOST}" -u"${SB_USERNAME}" -p"${SB_PASSWORD}" "${SB_DB_NAME}" 
        
        query="LOAD DATA LOCAL INFILE '${text_file}'
                INTO TABLE ${table_name}
                FIELDS TERMINATED BY ','
                ENCLOSED BY ''
                LINES TERMINATED BY '\n'
                IGNORE 1 LINES
                "
        echo "${query}" | mysql --skip-column-names --silent -h"${SB_HOST}" -u"${SB_USERNAME}" -p"${SB_PASSWORD}" "${SB_DB_NAME}" 

# Find users.
    SELECT User FROM mysql.user;
    SELECT @@GLOBAL.sql_mode;
    
# Show processlist
    SHOW PROCESSLIST
    
# How to insert data into MySQL and update if data already exist.
    -- Update name only.
    INSERT INTO person (id, name, age) VALUES(1, "john smith", 19) ON DUPLICATE KEY UPDATE name="John Smith";

    -- Update multiple columns.
    INSERT INTO person (id, name, age) VALUES(1, "john smith", 19) ON DUPLICATE KEY UPDATE name="John Smith", age=99;

    -- Use VALUES() to refer to inserted values.
    INSERT INTO person (id, name, age) VALUES(1, "john smith", 19) ON DUPLICATE KEY UPDATE name=VALUES(name), age=VALUES(age);

# Return empty string for null value
    select IFNULL(column1,"") from table
    
# Sub select
    SELECT * FROM ( SELECT * FROM tablename ) as tmp
    